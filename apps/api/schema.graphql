input AuthorizeSingleSignOnInput {
  params: JSON!
  provider: SingleSignOnProvider!
}

input CreatePageInput {
  parentId: ID
  siteId: ID!
}

input CreateSiteInput {
  name: String!
  workspaceId: ID!
}

input CreateWorkspaceInput {
  name: String!
}

scalar DateTime

input DeleteSiteInput {
  siteId: ID!
}

input DeleteWorkspaceInput {
  workspaceId: String!
}

input GenerateSingleSignOnAuthorizationUrlInput {
  provider: SingleSignOnProvider!
}

input InviteWorkspaceMemberInput {
  email: String!
  workspaceId: String!
}

union InviteWorkspaceMemberResult = WorkspaceMember | WorkspaceMemberInvitation

input IssueBlobUploadUrlInput {
  filename: String!
}

type IssueBlobUploadUrlResult {
  key: String!
  presignedUrl: String!
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

type Mutation {
  authorizeSingleSignOn(input: AuthorizeSingleSignOnInput!): UserWithAccessToken!
  createDefaultWorkspace: Workspace!
  createPage(input: CreatePageInput!): Page!
  createSite(input: CreateSiteInput!): Site!
  createWorkspace(input: CreateWorkspaceInput!): Workspace!
  deactivateUser: User!
  deleteSite(input: DeleteSiteInput!): Site!
  deleteWorkspace(input: DeleteWorkspaceInput!): Workspace!
  generateSingleSignOnAuthorizationUrl(input: GenerateSingleSignOnAuthorizationUrlInput!): String!
  inviteWorkspaceMember(input: InviteWorkspaceMemberInput!): InviteWorkspaceMemberResult!
  issueBlobUploadUrl(input: IssueBlobUploadUrlInput!): IssueBlobUploadUrlResult!
  logout: Boolean!
  removeWorkspaceMember(input: RemoveWorkspaceMemberInput!): WorkspaceMember!
  syncPageContent(input: SyncPageContentInput!): [PageContentSyncOperation!]!
  updatePagePosition(input: UpdatePagePositionInput!): Page!
  updateSite(input: UpdateSiteInput!): Site!
  updateUser(input: UpdateUserInput!): User!
  updateWorkspaceMemberRole(input: UpdateWorkspaceMemberRoleInput!): WorkspaceMember!
}

type Page {
  children: [Page!]!
  id: ID!
  order: String!
  parent: Page
  state: PageState!
}

type PageContentSnapshot {
  id: ID!
}

type PageContentState {
  id: ID!
}

enum PageContentSyncKind {
  AWARENESS
  PING
  SYNCHRONIZE_1
  SYNCHRONIZE_2
  SYNCHRONIZE_3
  UPDATE
}

type PageContentSyncOperation {
  data: String!
  kind: PageContentSyncKind!
  pageId: ID!
}

enum PageState {
  DELETED
  DRAFT
  PUBLISHED
}

type Query {
  me: User
  page(pageId: ID!): Page!
  site(siteId: ID!): Site!
  workspace(workspaceId: ID!): Workspace!
}

input RemoveWorkspaceMemberInput {
  userId: String!
  workspaceId: String!
}

enum SingleSignOnProvider {
  GOOGLE
}

type Site {
  id: ID!
  name: String!
  pages: [Page!]!
  url: String!
}

enum SiteState {
  ACTIVE
  DELETED
}

type Subscription {
  pageContentSyncStream(pageId: ID!): PageContentSyncOperation!
}

input SyncPageContentInput {
  clientId: String!
  data: String!
  kind: PageContentSyncKind!
  pageId: ID!
}

input UpdatePagePositionInput {
  lower: String
  pageId: String!
  parentId: String
  upper: String
}

input UpdateSiteInput {
  name: String!
  siteId: ID!
  slug: String!
}

input UpdateUserInput {
  avatarUrl: String!
  name: String!
}

input UpdateWorkspaceMemberRoleInput {
  role: WorkspaceMemberRole!
  userId: String!
  workspaceId: String!
}

type User {
  avatarUrl: String!
  email: String!
  id: ID!
  name: String!
  workspaces: [Workspace!]!
}

enum UserState {
  ACTIVE
  DEACTIVATED
}

type UserWithAccessToken {
  accessToken: String!
  user: User!
}

type Workspace {
  id: ID!
  meAsMember: WorkspaceMember
  members: [WorkspaceMember!]!
  name: String!
  sites: [Site!]!
}

type WorkspaceMember {
  id: ID!
  role: WorkspaceMemberRole!
  user: User!
}

type WorkspaceMemberInvitation {
  createdAt: DateTime!
  email: String!
  id: ID!
}

enum WorkspaceMemberRole {
  ADMIN
  MEMBER
}

enum WorkspaceState {
  ACTIVE
  DELETED
}
