input AuthorizeSingleSignOnInput {
  params: JSON!
  provider: SingleSignOnProvider!
}

enum BillingCycle {
  MONTHLY
  YEARLY
}

scalar Binary

interface Blob {
  id: ID!
}

type Category implements ICategory {
  id: ID!
  name: String!
  order: String!
  pages: [Page!]!
  recursivePageCount: Int!
  slug: String!
}

enum CategoryState {
  ACTIVE
  DELETED
}

input CreateCategoryInput {
  lower: ID
  siteId: ID!
  upper: String
}

input CreatePageInput {
  categoryId: ID!
  parentId: ID
  siteId: ID!
}

input CreateSiteInput {
  name: String!
  teamId: ID!
}

input CreateTeamInput {
  name: String!
}

scalar DateTime

input DeleteCategoryInput {
  categoryId: ID!
}

input DeletePageInput {
  pageId: ID!
}

input DeleteSiteInput {
  siteId: ID!
}

input DeleteTeamInput {
  teamId: String!
}

input DuplicatePageInput {
  pageId: ID!
}

type Embed {
  description: String
  html: String
  id: ID!
  thumbnailUrl: String
  title: String
  url: String!
}

type File implements Blob {
  id: ID!
  name: String!
  size: Int!
  url: String!
}

enum FixSeverity {
  ERROR
  WARNING
}

input GenerateSingleSignOnAuthorizationUrlInput {
  email: String
  provider: SingleSignOnProvider!
}

interface ICategory {
  id: ID!
  name: String!
  order: String!
  slug: String!
}

interface IPage {
  category: Category!
  id: ID!
  order: String!
  slug: String!
  state: PageState!
}

interface IPageSearchHit {
  highlight: PageSearchHighlight
}

interface ISite {
  id: ID!
  logo: Image
  name: String!
  slug: String!
  themeColor: String!
  url: String!
}

type Image implements Blob {
  id: ID!
  placeholder: String!
  ratio: Float!
  url: String!
}

input InviteTeamMemberInput {
  email: String!
  teamId: String!
}

union InviteTeamMemberResult = TeamMember | TeamMemberInvitation

input IssueBlobUploadUrlInput {
  filename: String!
}

type IssueBlobUploadUrlResult {
  fields: JSON!
  path: String!
  url: String!
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

enum JobState {
  COMPLETED
  FAILED
  PENDING
  RUNNING
}

type Mutation {
  authorizeSingleSignOn(input: AuthorizeSingleSignOnInput!): UserWithAccessToken!
  createCategory(input: CreateCategoryInput!): Category!
  createDefaultTeam: Team!
  createPage(input: CreatePageInput!): Page!
  createSite(input: CreateSiteInput!): Site!
  createTeam(input: CreateTeamInput!): Team!
  deactivateUser: User!
  deleteCategory(input: DeleteCategoryInput!): Category!
  deletePage(input: DeletePageInput!): Page!
  deleteSite(input: DeleteSiteInput!): Site!
  deleteTeam(input: DeleteTeamInput!): Team!
  duplicatePage(input: DuplicatePageInput!): Page!
  generateSingleSignOnAuthorizationUrl(input: GenerateSingleSignOnAuthorizationUrlInput!): String!
  inviteTeamMember(input: InviteTeamMemberInput!): InviteTeamMemberResult!
  issueBlobUploadUrl(input: IssueBlobUploadUrlInput!): IssueBlobUploadUrlResult!
  logout: Boolean!
  persistBlobAsFile(input: PersistBlobAsFileInput!): File!
  persistBlobAsImage(input: PersistBlobAsImageInput!): Image!
  publishPage(input: PublishPageInput!): Page!
  removeTeamMember(input: RemoveTeamMemberInput!): TeamMember!
  resendInvitationEmail(input: ResendInvitationEmailInput!): TeamMemberInvitation!
  revokeInvitation(input: RevokeInvitationInput!): TeamMemberInvitation!
  setSiteCustomDomain(input: SetSiteCustomDomainInput!): SiteCustomDomain!
  syncPageContent(input: SyncPageContentInput!): Boolean!
  unfurlEmbed(input: UnfurlEmbedInput!): Embed!
  unfurlLink(input: UnfurlLinkInput!): UnfurlLinkResult!
  unpublishPage(input: UnpublishPageInput!): Page!
  unsetSiteCustomDomain(input: UnsetSiteCustomDomainInput!): SiteCustomDomain!
  updateCategory(input: UpdateCategoryInput!): Category!
  updateCategoryPosition(input: UpdateCategoryPositionInput!): Category!
  updateCategorySlug(input: UpdateCategorySlugInput!): Category!
  updatePagePosition(input: UpdatePagePositionInput!): Page!
  updatePageSlug(input: UpdatePageSlugInput!): Page!
  updatePageView(input: UpdatePageViewInput!): Boolean!
  updatePaymentMethod(input: UpdatePaymentMethodInput!): PaymentMethod!
  updateSite(input: UpdateSiteInput!): Site!
  updateTeam(input: UpdateTeamInput!): Team!
  updateTeamMemberRole(input: UpdateTeamMemberRoleInput!): TeamMember!
  updateUser(input: UpdateUserInput!): User!
}

type Page implements IPage {
  category: Category!
  children: [Page!]!
  content: PageContentState!
  contentContributor: [PageContentContributor!]!
  hasUnpublishedChanges: Boolean!
  hasUnpublishedParents: Boolean!
  id: ID!
  lastPublishedAt: DateTime
  order: String!
  parent: Page
  recursiveChildCount: Int!
  site: Site!
  slug: String!
  state: PageState!
}

type PageContentContributor {
  createdAt: DateTime!
  id: ID!
  updatedAt: DateTime!
  user: User!
}

type PageContentState {
  editorTitle: String
  id: ID!
  subtitle: String
  title: String!
  update: Binary!
  updatedAt: DateTime!
  vector: Binary!
}

enum PageContentSyncKind {
  CURSOR
  UPDATE
  VERSION
}

type PageContentSyncStreamPayload {
  data: Binary!
  kind: PageContentSyncKind!
  pageId: ID!
}

type PageContentToc {
  anchorId: String!
  level: Int!
  title: String!
}

type PageSearchHighlight {
  subtitle: String
  text: String
  title: String
}

type PageSearchHit implements IPageSearchHit {
  highlight: PageSearchHighlight
  page: Page!
}

enum PageState {
  DELETED
  DRAFT
  PUBLISHED
}

type PaymentMethod {
  createdAt: DateTime!
  id: ID!
  name: String!
}

enum PaymentMethodState {
  ACTIVE
  DEACTIVATED
}

input PersistBlobAsFileInput {
  path: String!
}

input PersistBlobAsImageInput {
  modification: JSON
  path: String!
}

type PublicCategory implements ICategory {
  id: ID!
  name: String!
  order: String!
  pages: [PublicPage!]!
  slug: String!
}

type PublicPage implements IPage {
  category: Category!
  children: [PublicPage!]!
  content: PublicPageContent!
  id: ID!
  order: String!
  parent: PublicPage
  slug: String!
  state: PageState!
}

type PublicPageContent {
  content: JSON!
  excerpt: String!
  id: ID!
  subtitle: String
  title: String!
  tocs: [PageContentToc!]!
}

type PublicPageSearchHit implements IPageSearchHit {
  highlight: PageSearchHighlight
  page: PublicPage!
}

type PublicSite implements ISite {
  categories: [PublicCategory!]!
  firstPage: PublicPage
  id: ID!
  logo: Image
  name: String!
  pages: [PublicPage!]!
  slug: String!
  themeColor: String!
  url: String!
}

input PublishPageInput {
  pageId: ID!
}

type Query {
  image(id: ID!): Image!
  me: User
  page(pageId: ID!): Page!
  publicPage(path: String!): PublicPage!
  publicPageById(pageId: ID!): PublicPage!
  publicSite: PublicSite!
  searchPage(query: String!, siteId: String!): SearchPageResult!
  searchPageByChange(query: String!, siteId: String!): [SearchPageByChangeHit!]!
  searchPublicPage(query: String!): SearchPublicPageResult!
  searchPublicPageByNaturalLanguage(query: String!): SearchPublicPageByNaturalLanguageResult!
  site(siteId: ID!): Site!
  team(teamId: ID!): Team!
}

input RemoveTeamMemberInput {
  teamId: String!
  userId: String!
}

input ResendInvitationEmailInput {
  invitationId: String!
}

input RevokeInvitationInput {
  invitationId: String!
}

type SearchPageByChangeFix {
  completion: String!
  reason: String!
  severity: FixSeverity!
  text: String!
}

type SearchPageByChangeHit {
  fixes: [SearchPageByChangeFix!]!
  page: Page!
}

type SearchPageResult {
  estimatedTotalHits: Int!
  hits: [PageSearchHit!]!
}

type SearchPublicPageByNaturalLanguageResult {
  answer: String!
  pages: [PublicPage!]!
}

type SearchPublicPageResult {
  estimatedTotalHits: Int!
  hits: [PublicPageSearchHit!]!
}

input SetSiteCustomDomainInput {
  domain: String!
  siteId: ID!
}

enum SingleSignOnProvider {
  GOOGLE
}

type Site implements ISite {
  categories: [Category!]!
  customDomain: SiteCustomDomain
  firstPage: Page
  hasPage: Boolean!
  id: ID!
  logo: Image
  name: String!
  pageCount: Int!
  pageUpdatedAt: DateTime
  slug: String!
  team: Team!
  themeColor: String!
  url: String!
}

type SiteCustomDomain {
  domain: String!
  id: ID!
  state: SiteCustomDomainState!
}

enum SiteCustomDomainState {
  ACTIVE
  PENDING
}

enum SiteState {
  ACTIVE
  DELETED
}

union SiteUpdateStreamPayload = Page | Site

type Subscription {
  pageContentSyncStream(pageId: ID!): PageContentSyncStreamPayload!
  siteCustomDomainValidationStream(siteCustomDomainId: ID!): SiteCustomDomain!
  siteUpdateStream(siteId: ID!): SiteUpdateStreamPayload!
  teamUpdateStream(teamId: ID!): TeamUpdateStreamPayload!
}

input SyncPageContentInput {
  data: Binary!
  kind: PageContentSyncKind!
  pageId: ID!
}

type Team {
  avatar: Image!
  id: ID!
  invitations: [TeamMemberInvitation!]!
  meAsMember: TeamMember
  members: [TeamMember!]!
  name: String!
  paymentMethod: PaymentMethod
  sites: [Site!]!
}

type TeamMember {
  id: ID!
  isSoleAdmin: Boolean!
  role: TeamMemberRole!
  user: User!
}

type TeamMemberInvitation {
  createdAt: DateTime!
  email: String!
  id: ID!
}

enum TeamMemberRole {
  ADMIN
  MEMBER
}

enum TeamRestrictionType {
  DASHBOARD_WRITE
  USERSITE_READ
}

enum TeamState {
  ACTIVE
  DELETED
}

union TeamUpdateStreamPayload = Team | TeamMember

input UnfurlEmbedInput {
  noCache: Boolean!
  url: String!
}

input UnfurlLinkInput {
  siteId: ID!
  url: String!
}

union UnfurlLinkResult = Page | UnfurlLinkUrl

type UnfurlLinkUrl {
  url: String!
}

input UnpublishPageInput {
  pageId: ID!
}

input UnsetSiteCustomDomainInput {
  siteCustomDomainId: ID!
}

input UpdateCategoryInput {
  categoryId: ID!
  name: String!
}

input UpdateCategoryPositionInput {
  categoryId: String!
  lower: String
  upper: String
}

input UpdateCategorySlugInput {
  categoryId: ID!
  slug: String!
}

input UpdatePagePositionInput {
  categoryId: String!
  lower: String
  pageId: String!
  parentId: String
  upper: String
}

input UpdatePageSlugInput {
  pageId: ID!
  slug: String!
}

input UpdatePageViewInput {
  deviceId: String!
  pageId: ID!
}

input UpdatePaymentMethodInput {
  birthOrBusinessRegistrationNumber: String!
  cardNumber: String!
  expiry: String!
  passwordTwoDigits: String!
  teamId: String!
}

input UpdateSiteInput {
  logoId: ID
  name: String!
  siteId: ID!
  slug: String!
  themeColor: String!
}

input UpdateTeamInput {
  avatarId: String!
  name: String!
  teamId: String!
}

input UpdateTeamMemberRoleInput {
  role: TeamMemberRole!
  teamId: String!
  userId: String!
}

input UpdateUserInput {
  avatarId: ID!
  name: String!
}

type User {
  avatar: Image!
  email: String!
  id: ID!
  name: String!
  teams: [Team!]!
}

enum UserState {
  ACTIVE
  DEACTIVATED
}

type UserWithAccessToken {
  accessToken: String!
  user: User!
}
