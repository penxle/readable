input AuthorizeSingleSignOnInput {
  params: JSON!
  provider: SingleSignOnProvider!
}

interface Blob {
  id: ID!
}

input CreatePageInput {
  parentId: ID
  siteId: ID!
}

input CreateSiteInput {
  name: String!
  teamId: ID!
}

input CreateTeamInput {
  name: String!
}

scalar DateTime

input DeletePageInput {
  pageId: ID!
}

input DeleteSiteInput {
  siteId: ID!
}

input DeleteTeamInput {
  teamId: String!
}

input DuplicatePageInput {
  pageId: ID!
}

type File implements Blob {
  id: ID!
  url: String!
}

input GenerateSingleSignOnAuthorizationUrlInput {
  provider: SingleSignOnProvider!
}

interface IPage {
  id: ID!
  order: String!
  slug: String!
  state: PageState!
}

interface ISite {
  id: ID!
  logo: Image
  name: String!
  slug: String!
  url: String!
}

type Image implements Blob {
  id: ID!
  placeholder: String!
  url: String!
}

input InviteTeamMemberInput {
  email: String!
  teamId: String!
}

union InviteTeamMemberResult = TeamMember | TeamMemberInvitation

input IssueBlobUploadUrlInput {
  filename: String!
}

type IssueBlobUploadUrlResult {
  fields: JSON!
  path: String!
  url: String!
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

type Mutation {
  authorizeSingleSignOn(input: AuthorizeSingleSignOnInput!): UserWithAccessToken!
  createDefaultTeam: Team!
  createPage(input: CreatePageInput!): Page!
  createSite(input: CreateSiteInput!): Site!
  createTeam(input: CreateTeamInput!): Team!
  deactivateUser: User!
  deletePage(input: DeletePageInput!): Page!
  deleteSite(input: DeleteSiteInput!): Site!
  deleteTeam(input: DeleteTeamInput!): Team!
  duplicatePage(input: DuplicatePageInput!): Page!
  generateSingleSignOnAuthorizationUrl(input: GenerateSingleSignOnAuthorizationUrlInput!): String!
  inviteTeamMember(input: InviteTeamMemberInput!): InviteTeamMemberResult!
  issueBlobUploadUrl(input: IssueBlobUploadUrlInput!): IssueBlobUploadUrlResult!
  logout: Boolean!
  persistBlobAsFile(input: PersistBlobAsFileInput!): File!
  persistBlobAsImage(input: PersistBlobAsImageInput!): Image!
  publishPage(input: PublishPageInput!): Page!
  removeTeamMember(input: RemoveTeamMemberInput!): TeamMember!
  syncPageContent(input: SyncPageContentInput!): [PageContentSyncOperation!]!
  unpublishPage(input: UnpublishPageInput!): Page!
  updatePagePosition(input: UpdatePagePositionInput!): Page!
  updateSite(input: UpdateSiteInput!): Site!
  updateTeam(input: UpdateTeamInput!): Team!
  updateTeamMemberRole(input: UpdateTeamMemberRoleInput!): TeamMember!
  updateUser(input: UpdateUserInput!): User!
}

type Page implements IPage {
  children: [Page!]!
  content: PageContentState!
  contentContributor: [PageContentContributor!]!
  hasUnpublishedChanges: Boolean!
  hasUnpublishedParents: Boolean!
  id: ID!
  lastPublishedAt: DateTime
  order: String!
  parent: Page
  site: Site!
  slug: String!
  state: PageState!
}

type PageContentContributor {
  createdAt: DateTime!
  id: ID!
  updatedAt: DateTime!
  user: User!
}

type PageContentSnapshot {
  id: ID!
}

type PageContentState {
  id: ID!
  title: String!
}

enum PageContentSyncKind {
  AWARENESS
  PING
  SYNCHRONIZE_1
  SYNCHRONIZE_2
  SYNCHRONIZE_3
  UPDATE
}

type PageContentSyncOperation {
  data: String!
  kind: PageContentSyncKind!
  pageId: ID!
}

enum PageState {
  DELETED
  DRAFT
  PUBLISHED
}

input PersistBlobAsFileInput {
  path: String!
}

input PersistBlobAsImageInput {
  modification: JSON
  path: String!
}

type PublicPage implements IPage {
  children: [PublicPage!]!
  content: PublicPageContent!
  id: ID!
  order: String!
  parent: PublicPage
  slug: String!
  state: PageState!
}

type PublicPageContent {
  content: JSON!
  id: ID!
  subtitle: String
  title: String!
}

type PublicSite implements ISite {
  id: ID!
  logo: Image
  name: String!
  pages: [PublicPage!]!
  slug: String!
  url: String!
}

input PublishPageInput {
  pageId: ID!
}

type Query {
  me: User
  page(pageId: ID!): Page!
  publicPage(slug: String!): PublicPage!
  publicSite(hostname: String!): PublicSite!
  site(siteId: ID!): Site!
  team(teamId: ID!): Team!
}

input RemoveTeamMemberInput {
  teamId: String!
  userId: String!
}

enum SingleSignOnProvider {
  GOOGLE
}

type Site implements ISite {
  id: ID!
  logo: Image
  name: String!
  pages: [Page!]!
  slug: String!
  team: Team!
  url: String!
}

enum SiteState {
  ACTIVE
  DELETED
}

union SiteUpdateStreamPayload = Page | Site

type Subscription {
  pageContentSyncStream(pageId: ID!): PageContentSyncOperation!
  siteUpdateStream(siteId: ID!): SiteUpdateStreamPayload!
}

input SyncPageContentInput {
  clientId: String!
  data: String!
  kind: PageContentSyncKind!
  pageId: ID!
}

type Team {
  avatar: Image!
  id: ID!
  meAsMember: TeamMember
  members: [TeamMember!]!
  name: String!
  sites: [Site!]!
}

type TeamMember {
  id: ID!
  role: TeamMemberRole!
  user: User!
}

type TeamMemberInvitation {
  createdAt: DateTime!
  email: String!
  id: ID!
}

enum TeamMemberRole {
  ADMIN
  MEMBER
}

enum TeamState {
  ACTIVE
  DELETED
}

input UnpublishPageInput {
  pageId: ID!
}

input UpdatePagePositionInput {
  lower: String
  pageId: String!
  parentId: String
  upper: String
}

input UpdateSiteInput {
  logoId: ID
  name: String!
  siteId: ID!
  slug: String!
}

input UpdateTeamInput {
  avatarId: String!
  name: String!
  teamId: String!
}

input UpdateTeamMemberRoleInput {
  role: TeamMemberRole!
  teamId: String!
  userId: String!
}

input UpdateUserInput {
  avatarId: ID!
  name: String!
}

type User {
  avatar: Image!
  email: String!
  id: ID!
  name: String!
  teams: [Team!]!
}

enum UserState {
  ACTIVE
  DEACTIVATED
}

type UserWithAccessToken {
  accessToken: String!
  user: User!
}
